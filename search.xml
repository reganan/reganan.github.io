<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[基本的设计模式]]></title>
      <url>http://yoursite.com/2017/04/22/design-pattern/</url>
      <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>定义：产生一个类的唯一实例，例如｛｝</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 单例包装器, fn 构造函数</div><div class="line">var singleton = function(fn) &#123;</div><div class="line">    var result;</div><div class="line">    return function() &#123;</div><div class="line">        return result || (result = fn.apply(this, arguments));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 创建一个遮罩层单例的写法</div><div class="line">var createMask = singleton(function() &#123;</div><div class="line">    return document.body.appedChild(document.createElement(&apos;div&apos;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">createMask();</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>定义：简单工厂模式是由一个方法来决定到底要创建哪个类的实例, 而这些实例经常都拥有相同的接口. 这种模式主要用在所实例化的类型在编译期并不能确定， 而是在执行期决定的情况。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// 定义工厂</div><div class="line">var AbstractVehicleFactory = (function() &#123;</div><div class="line">	var getVehicle,			// 生产车辆</div><div class="line">		registerVehicle,	// 注册可生产类型</div><div class="line">		types = &#123;&#125;;			// 所有可生产的车辆类型</div><div class="line">	</div><div class="line">	getVehicle = function(tpye, args) &#123;	// 创建对象</div><div class="line">		var Vehicle = tpyes[type];</div><div class="line">		return Vehicle ? new Vehicle(args) : null;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	registerVehicle = funciton(type, Vehicle) &#123;</div><div class="line">		var proto = Vehicle.prototype;	     // 获取原型</div><div class="line">		if (proto.drive &amp;&amp; proto.break) &#123;	 // 必须满足抽象接口</div><div class="line">			types[type] = Vehicle;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		return AbstractVehicleFactory;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">&#125;) ();</div><div class="line"></div><div class="line">// 定义抽象交通工具类，需有drive/break方法</div><div class="line">function Vehicle() &#123;&#125;;</div><div class="line">Vehicle.prototype.drive = function() &#123;&#125;;</div><div class="line">Vehicle.prototype.break = function() &#123;&#125;;</div><div class="line"></div><div class="line">// 定义子类Car，继承自Vehicle</div><div class="line">function Car(opt) &#123;this.option = opt&#125;;</div><div class="line">Car.prototype = new Vehicle();</div><div class="line"></div><div class="line">// 用法</div><div class="line">AbstractVehicleFactory.registerVehicle(&apos;car&apos;, Car);</div><div class="line">// 使用工厂创建一个car实例</div><div class="line">var car = AbstractVehicleFactory.getVehicle(&apos;car&apos;, &#123;color: &apos;black&apos;&#125;);</div></pre></td></tr></table></figure>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>定义：对象间存在一对多(1:n)的关系时，则使用观察者模式。例：当修改一个对象时，通知它的依赖对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">Events = function () &#123;</div><div class="line">    var obj = &#123;&#125;,   // 保存事件及其回调函数</div><div class="line">        listen,     // 增添订阅事件 </div><div class="line">        trigger,    // 触发订阅事件</div><div class="line">        remove;     // 移除事件对应的回调 </div><div class="line">        </div><div class="line">    listen = function (key, fn) &#123;</div><div class="line">        var stack, ref; // stack：事件对应的回调函数数组</div><div class="line">        stack = (rel = obj[key]) == null ? obj[key] = [] : rel;</div><div class="line">        return  stack.push(fn);</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    trigger = function(key) &#123;</div><div class="line">        var stack, ref, fn;</div><div class="line">        stack = (rel = obj[key]) == null ? obj[key] = [] : rel;</div><div class="line">        // 遍历回调函数依次执行</div><div class="line">        for (var i = 0, len = stack.length; i &lt; len; i++) &#123;</div><div class="line">            fn = stack[i];</div><div class="line">            if (fn.apply(null, arguments) == false) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    remove = function (key) &#123;</div><div class="line">        var ref;    // 对象的引用</div><div class="line">        if ((ref = obj[key]) != null)</div><div class="line">            ref.length = 0; // 清空事件数组</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    return &#123;</div><div class="line">        listen: listen,</div><div class="line">        trigger: trigger,</div><div class="line">        remove: remove</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p>定义：交互双方通过第三方来通信。由网状结构改为星型结构，依赖于统一的节点。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">Events = function () &#123;</div><div class="line">    var obj = &#123;&#125;,       // 保存事件及其回调函数</div><div class="line">        subcribe,       // 增添订阅事件 </div><div class="line">        publish,        // 发布订阅事件</div><div class="line">        subUid = -1;    // 订阅事件uid</div><div class="line">                </div><div class="line">    subcribe = function (key, fn) &#123;</div><div class="line">        var stack, ref, token;  // stack：事件对应的回调函数数组</div><div class="line">        token = (++subcribe).toString();</div><div class="line">        stack = (rel = obj[key]) == null ? obj[key] = [] : rel;</div><div class="line">        stack.push(&#123;fn: fn, token: token&#125;);</div><div class="line">        return token;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    publish = function(key) &#123;</div><div class="line">        var stack, ref, fn;</div><div class="line">        stack = (rel = obj[key]) == null ? obj[key] = [] : rel;</div><div class="line">        // 遍历回调函数依次执行</div><div class="line">        for (var i = 0, len = stack.length; i &lt; len; i++) &#123;</div><div class="line">            fn = stack[i].fn;</div><div class="line">            if (fn.apply(null, arguments) == false) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    return &#123;</div><div class="line">        subcribe: subcribe,</div><div class="line">        publish: publish,</div><div class="line">        installTo: function(owner) &#123;    // 与中介建立联系</div><div class="line">            owner.subcribe = subcribe;</div><div class="line">            owner.publish = publish;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="中介者-vs-观察者模式"><a href="#中介者-vs-观察者模式" class="headerlink" title="中介者 vs 观察者模式"></a>中介者 vs 观察者模式</h4><ul>
<li>中介者模式中每个模块都可以发布消息，观察者模式中观察者只能等待消息</li>
<li>模块依赖方式不同，中介者是星型结构，观察者是网状结构</li>
<li>映射关系不同：中介者n:1，观察者n:n</li>
</ul>
<h4 id="中介者的缺点"><a href="#中介者的缺点" class="headerlink" title="中介者的缺点"></a>中介者的缺点</h4><ul>
<li>中介者的复杂度较大</li>
<li>性能下降（不能直接通信）</li>
<li>逻辑拆分难度加大</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符串/数组的全排列问题]]></title>
      <url>http://yoursite.com/2017/04/04/permutation/</url>
      <content type="html"><![CDATA[<h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><ol>
<li>给定一个字符串，打印其所有字符的全排列</li>
<li>给定一个数组，打印其可能的排列</li>
<li>八皇后问题</li>
</ol>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于排列问题，可将复杂问题进行分解，再递归的解决小问题。  </p>
<p>具体实现：  </p>
<ul>
<li>固定第一个数字，求后面数字的全排列；   </li>
<li>将第一个数字与后面的数字分别交换；</li>
</ul>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class Test</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int[] colIndex = &#123;0,1,2,3,4,5,6,7&#125;;</div><div class="line">		permutation(colIndex, 0);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	// 求数组的全排列问题</div><div class="line">	public static void permutation(int[] data, int begin) &#123;</div><div class="line">		if (begin &gt;= data.length) &#123;</div><div class="line">			print(data);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		for (int i = begin; i &lt; data.length; i++) &#123;</div><div class="line">			swap(data, begin, i);</div><div class="line">			permutation(data, begin+1);</div><div class="line">			swap(data, begin, i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void swap(int[] data, int i, int j) &#123;</div><div class="line">		int temp = data[i];</div><div class="line">		data[i] = data[j];</div><div class="line">		data[j] = temp;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public static void print(int[] data) &#123;</div><div class="line">		for (int i : data) &#123;</div><div class="line">			System.out.print(i + &quot; &quot;);</div><div class="line">		&#125;</div><div class="line">		System.out.println();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[整数的分解方法]]></title>
      <url>http://yoursite.com/2017/04/03/integer-decompose/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>如下示例：<br>1：共0种分解方法；<br>2：共0种分解方法；<br>3：3=2+1 共1种分解方法；<br>4：4=3+1=2+1+1 共2种分解方法；<br>5：5=4+1=3+2=3+1+1=2+2+1=2+1+1+1 共5种分解方法<br>6：6=5+1=4+2=4+1+1=3+2+1=3+1+1+1=2+2+1+1=2+1+1+1+1 共7种分解方法<br>以此类推，求一任意整数num有几种分解方法？<br>输入一个数字（1到90），输出该整数的分解方法个数，如：<br>输入：2——输出：0<br>输入：3——输出：1<br>输入：5——输出：5</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以通过<strong>动态规划</strong>来解题，观察给出的整数的分解结果，不难发现如下规律：   </p>
<ol>
<li>分解后的结果中不能出现完全一样的数；</li>
<li>按分解后最小数来分类，数num共有num-1/2种情况；</li>
<li>每一类先将整数num分解为i+j,其中1&lt;=j&lt;=(num-1)/2，i&gt;j，接下来只需要对i分解即可</li>
<li>对于i，可借用i的分解情况，当i为偶数时，需补充i/2+i/2这种情况</li>
<li>整数num的所有分解情况为所有分类的种数之和</li>
</ol>
<h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><table>
<thead>
<tr>
<th>输入num</th>
<th>最小数为1</th>
<th>最小数为2</th>
<th>分解总数</th>
</tr>
</thead>
<tbody>
<tr>
<td>3</td>
<td>(2,1)</td>
<td>…</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>(3,1) (2,1,1)</td>
<td>…</td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td>(4,1) (3,1,1) (2,1,1,1) (2,2,1)</td>
<td>(3,2)</td>
<td>5</td>
</tr>
<tr>
<td>6</td>
<td>(5,1) (4,1,1) (3,1,1,1) (2,1,1,1,1) (2,2,1,1) (3,2,1)</td>
<td>(4,2)</td>
<td>7</td>
</tr>
</tbody>
</table>
<p>对于整数7，可分为(6,1) (5,2) (4,3)三大类：<br>对于（6,1)，6的分解情况有7种，因为6为偶数，需再补充（3,3,1)这种情况，所以最小数为1的有1＋1＋7＝9种；<br>对于（5,2)，5分解最小数为2的有1种，所以最小数为2的有1＋1＝2种；<br>对于（4,3)，因为4 &lt; 2*3，4不能再分解，只有一种；<br>7的分解情况共9＋2＋1＝12种</p>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>输入5－－输出5种；<br>输入6－－输出7种；<br>输入7－－输出12种；  </p>
<h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public class Test</div><div class="line">&#123;</div><div class="line">	public static void main(String[] args)</div><div class="line">	&#123;</div><div class="line">		int[] test = &#123;3,4,5,6,7&#125;;</div><div class="line">		for (int num : test) &#123;</div><div class="line">			System.out.println(num + &quot;\t(&quot; + decompose(num)+ &quot;) 种&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	// 求整数的分数情况</div><div class="line">	public static int decompose(int num) &#123;</div><div class="line">		if (num &lt; 3) return 0;</div><div class="line">		</div><div class="line">		// 从3开始，构建二维数组</div><div class="line">		int[][] results = new int[num+1][];</div><div class="line">		for (int i = 3; i &lt;= num; i++) &#123;</div><div class="line">			//  分解后最小数可能的种数</div><div class="line">			int cols = 	(i-1)/2;</div><div class="line">			results[i] = new int[cols+1];</div><div class="line">			results[i][0] = 0;</div><div class="line">			for (int j = 1; j &lt;= cols; j++) &#123;</div><div class="line">				// 对于最小为j的情况，至少有一个分解</div><div class="line">				int count = 1;</div><div class="line">				int biger = i - j;</div><div class="line">				if (biger &gt; 2*j) &#123;</div><div class="line">					// 若大数为偶数，可以分解为biger/2 + biger/2</div><div class="line">					if (biger % 2 == 0) count++;</div><div class="line">					// 其余的分解可用biger的分解中最小数j的情况确定</div><div class="line">					for (int k = j; k &lt; results[biger].length; k++)</div><div class="line">						count += results[biger][k];</div><div class="line">				&#125;</div><div class="line">				results[i][j] = count;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		int total = 0;</div><div class="line">		// 第num行所有的和为分解的所有情况</div><div class="line">		for (int i = 0; i &lt; results[num].length; i++)</div><div class="line">			total += results[num][i];</div><div class="line">		return total;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[拒绝碎片化学习]]></title>
      <url>http://yoursite.com/2016/12/04/study-method/</url>
      <content type="html"><![CDATA[<blockquote>
<p>信息超载、知识碎片化引发的学习焦虑，我们该何去何从？</p>
</blockquote>
<h2 id="一个小故事"><a href="#一个小故事" class="headerlink" title="一个小故事"></a>一个小故事</h2><p> 某天朋友向你展示了一个牛逼的词汇，其得瑟的表情一览无遗。不行，我怎么能不知道这个呢，你心里暗想。于是你赶紧询问，朋友趁机向你推荐了一个公众号。你关注后，觉得哇、卧槽、好牛逼！</p>
 <a id="more"></a>  
<p> 你开始每天刷，希望能够看完每天文章。渐渐地，你发现关于衣食住行学习职业爱情，都有公众号。你突然觉得以前的生活白过了，原来还有这么多你不知道的，为什么别人过的那么精细，而你好像一无所知的就过去了。为了让自己成为一个“有文化的人”，你更加疯狂的刷文，还学到了一个概念－时间碎片化，这正符合你的要求。于是乎，上厕所、排队、走路、睡前都成了你学习的好时段。</p>
<p> 你发现还是看不完，好在微信还有收藏功能，心里不由得感谢腾讯。全TM收藏！可是，半年过去了，你心里开始纳闷——我到底看了什么呢，为什么一点也想不起来？看到文章越来越牛逼，身边的同学只是上课学习却好像懂得比你还多，这个世界最LOW最无知的好像就是自己。</p>
<p> 你开始焦虑。你更加疯狂的学习，直到某天你瘫痪了，MD我为什么这么累。你开始寻找发泄的工具，小说、娱乐、影视节目，还是这些不动脑的看起来舒服。恭喜你，你又得了懒癌。过了一周，你发现卧槽不行，我上大学不是来玩的，我要学习。看到公众号里的小红点，你心痒难耐，于是又开始刷刷刷……</p>
<p> 本世纪的三大绝症，其实是个死循环。</p>
<p> <img src="http://oa8x7urjv.bkt.clouddn.com/study.png" alt="三大绝症"></p>
<h2 id="为什么会这样"><a href="#为什么会这样" class="headerlink" title="为什么会这样"></a>为什么会这样</h2><p><strong>因为，所有的当代人都面临着两个问题——信息超载和知识碎品化。</strong></p>
<blockquote>
<p>知识的存储能力，人类早被电脑完胜，知识的搜索和链接能力，才是学习的核心竞争力。</p>
</blockquote>
<p>信息超载自不待言，谷歌百度上的信息早已如漫天繁星。知识的碎片化体现在三个方面：</p>
<ol>
<li>学习的时间空间被打破：任何时间、任何地点，移动终端允许你不间断的学习；</li>
<li>信息被打破：我们看头条、刷知乎、逛豆瓣，我们永远不知道下一条会讲什么，只能被动接受；</li>
<li>知识结构碎片化：你不知道前因后果，不清楚上下文，总是在断章取义。信息缺乏了上下文，就是废话。</li>
</ol>
<p>第三点尤为重要，从小学起我们就被教导，阅读要联系上下文，不同环境下同样的词有不同的语义。而知识碎片化让我们只记住了观点，而忘记了缘由。它极大的提高了并没有什么卵用的信息本身，而降低了最重要的独立思考的能力。深度思考是件不容易的事，需要时间和空间的配合，于是每天深夜才是我们深刻理解的高峰，因为那时无人打扰。而面对太容易获取的网上知识，它们变的廉价，我们变的不在乎，从而也就没有了思考。牛人看的越多，我们越焦虑，我们开始慌了，慌不择路，只要是新的知识，我们就想学习。饮鸠止渴，一直到瘫痪。</p>
<pre><code>“我靠，我看了本书特好的书！”  
“是吗是吗说什么的给我讲讲？”  
“恩……特别好！特别牛！……我讲不出来，给个链接你自己看吧。”
</code></pre><p>上面的对话每天都在上演。学习本是为了增加理解力，解决问题，而我们却用它来逃避问题，只能越走越远。</p>
<h2 id="我们需要的是什么"><a href="#我们需要的是什么" class="headerlink" title="我们需要的是什么"></a>我们需要的是什么</h2><p>专家们降低了学习知识的门槛，反而增大了你与他们的差距。内容创业时代，靠的都是这三个技能： </p>
<ul>
<li>某个领域的专业知识</li>
<li>与热点结合的搜索能力</li>
<li>重新架构的链接能力</li>
</ul>
<p><img src="http://oa8x7urjv.bkt.clouddn.com/styde-process.png" alt="学习过程"></p>
<p>一百万个知识的砂砾，也只是沙漠，人们爱看的，是沙子集合成的金字塔——有组织的知识才是核心竞争力。有高度的知识，才有知识压强。</p>
<p>在你不断的在沙漠闲逛，他们自己的金字塔盖了起来。</p>
<h2 id="靠谱的学习方式"><a href="#靠谱的学习方式" class="headerlink" title="靠谱的学习方式"></a>靠谱的学习方式</h2><p>抵制知识碎片化，让知识“零存整取”！</p>
<ol>
<li><p><strong>学习的起点不是焦虑，而是解决问题</strong></p>
<p> 学习本身是为了解决生活中的问题。在学生时代，我们更熟悉的是，系统的学好学完一门知识，再接受有“考试范围”的检验。而大部分时间，生活会先给我们一个考试，然后你根据问题，搜索关键词开始学习。学习的起点不是因为看了别人学习了什么，而是真实遇到的一个问题：</p>
<ul>
<li>通过思考，清晰地提出明确具体的问题（这时候，问题已经解决了一半）</li>
<li>问题拆分，找出关键字，搜索资源</li>
<li>寻找你想知道的知识</li>
</ul>
</li>
<li><p><strong>高效地寻找学习资源</strong>  </p>
<p> 大部分人找资源，第一反应是上网，或买本书。这很容易陷入困境，因为网络是个无底洞，这里翻翻那里看看，一不小心，2天都出不来。要把书里面的内容消化用完至少2周，前提还是你选对了书。学习之前，我们需要对信息进行筛选和删除（太多的信息是重复的）。所以，不妨按照下面的方式进行：</p>
<ol>
<li>从有经验的人开始，根据你提出的问题，给你清晰的建议、方向和边界；</li>
<li>找到行业对标，看看人家是怎么做的；</li>
<li>进一步用网络搜索资料和书的总结和评论，最后才是系统的看书。</li>
</ol>
<p><img src="http://oa8x7urjv.bkt.clouddn.com/study-source.png" alt="学习资源"></p>
</li>
<li><p><strong>721法则：留出足够多的时间练习、思考和讨论</strong>  </p>
<p> 行动学习理论认为，人要掌握一门技能，需要有10%的时间学习知识和信息，70%的时间练习和践行，还有20%的时间与人沟通和讨论。这个原则叫做721原则。</p>
<p> 碎片化学习对于10%的信息接收非常有用，而剩下独处练习的70%和讨论的20%，则需要留出大量时间来系统学习——碎片化学习永远只是系统化学习的辅助。你需要留出足够多整块时间学习。</p>
</li>
<li><p><strong>用输出规范输入</strong></p>
<p> 用输出倒逼输入。你可以写文章、讲课、做PPT、做读书笔记、导图……只有一个要求——你的输出有结构。你要先搭好图纸，设计出一个承重结构，然后铺钢筋，最后才放水泥和沙子。</p>
<p> 先建立一个结构，你的知识和信息量会自动吸附在结构之上。时间一长，你会成为一个能根据结构链接知识的人。</p>
</li>
<li><p><strong>不会写作怎么办</strong>  </p>
<p> 研究新建构主义的王竹立老师有一个观点——把知识零存整取：</p>
<p> 第一步：积件式写作，先拼凑出一篇文章（可以粘贴，但注明出处）</p>
<p> 第二步：个性化改写，写自己的案例，写自己的风格</p>
<p> 第三部：创造性重构，创新出全新的思路和模型</p>
<p> 大多数人看了别人的文章，惊叹之余便是妄自菲薄，害怕地不敢动手尝试。其实写写又何妨呢，至少我们还创作出了一点东西。写作不只是为了传播，至少为了思考和学习。</p>
</li>
</ol>
<p>以上的文章是我参考古典古少侠先生的文章<a href="http://36kr.com/p/5057997.html" target="_blank" rel="external">为什么越学反而越蠢？碎片化学习是个骗局</a>而写的，现在我抄袭了很多部分，但会逐渐地改写成自己的风格。</p>
<h2 id="学习一个新的领域"><a href="#学习一个新的领域" class="headerlink" title="学习一个新的领域"></a>学习一个新的领域</h2><p>上面讲到如何系统的学习，寻找资源，这里再简要提下如何踏入一个新的领域。包括我们在步入大学学习专业，或者自行探索新的爱好时都会很有帮助。</p>
<p><img src="http://oa8x7urjv.bkt.clouddn.com/study-field.png" alt="知识体系"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从0到1]]></title>
      <url>http://yoursite.com/2016/09/06/0-1Note/</url>
      <content type="html"><![CDATA[<p>好久没有做过读书笔记了。</p>
<p>这几天看了彼得 蒂尔的《从0到1》，可以说是一本创业指导书。</p>
<p>作者对于企业、产品、技术、销售、创始人的论断读起来很是精采，于是记录一下。</p>
<a id="more"></a>
<p><img src="http://oa8x7urjv.bkt.clouddn.com/%E4%BB%8E0%E5%88%B01.png" alt="nodes"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[百度前端技术学院2016春季班]]></title>
      <url>http://yoursite.com/2016/07/25/ife2016/</url>
      <content type="html"><![CDATA[<p>3月份的时候参加了百度举办的前端技术学院，分为4个阶段，为期2个月左右。对于我这个前端小白来说感觉还是相当不错的。从基础的HTML、CSS切图到JS的运用，最后的大题看起来也蛮不错的。可惜后来没有时间做了，这里附上题目地址和我完成的情况。</p>
<a id="more"></a>
<p>题目地址： <a href="http://ife.baidu.com/task/all" target="_blank" rel="external">http://ife.baidu.com/task/all</a></p>
<p>我的作业： <a href="http://sungd.github.io/ife201x/" target="_blank" rel="external">http://sungd.github.io/ife201x/</a></p>
<p>Github源码：<a href="https://github.com/sungd/ife201x" target="_blank" rel="external">https://github.com/sungd/ife201x</a></p>
<h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>作为一个公益的前端教学，感觉出题人是很用心的，题目的难度循序渐进，给出的参考资料也很全面。“授之以鱼，不如授之以渔”，<strong>分析问题、自己寻找最佳的解决方案、学会沟通与合作、善于利用搜索和工具</strong>，这才是我们应该学习的东西吧。</p>
<p>略显遗憾的是，本来叫了宿舍的3个小伙伴一起参与，实际只有一个人间接着陪我一起写，没有体会到合作完成一件任务的快感。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gulp优化hexo博客代码]]></title>
      <url>http://yoursite.com/2016/07/14/gulp-hexo/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Next主题在Hexo引擎解析md文件时生成到public文件中的代码会包含大量无用空白。多余的空白会增加文档大小，增加延时，压缩代码也是前端优化的重点，借此正好学习一下gulp的使用。</p>
<a id="more"></a>
<ul>
<li>压缩前的代码：</li>
</ul>
<p><img src="http://oa8x7urjv.bkt.clouddn.com/raw.jpg" alt="raw code"></p>
<ul>
<li>压缩后的代码：</li>
</ul>
<p><img src="http://oa8x7urjv.bkt.clouddn.com/optimization.png" alt="optimiazation code"></p>
<h3 id="何为Gulp"><a href="#何为Gulp" class="headerlink" title="何为Gulp"></a>何为Gulp</h3><p>如果你只是想快速实现效果，可以直接跳到第三步，“使用Gulp”。</p>
<p><a href="https://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="external">https://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</a><br>作为一款优秀的前端构建工具，Gulp常与Grunt作为对比，这篇博文里讲的很好了，不再赘述。</p>
<p><a href="https://github.com/gulpjs/gulp" target="_blank" rel="external">https://github.com/gulpjs/gulp</a><br>Gulp的命令也比较少，看了github的介绍，相信你也可以很快入手。</p>
<p><a href="http://gulpjs.com/plugins/" target="_blank" rel="external">http://gulpjs.com/plugins/</a><br>Gulp的插件可以来这里搜，貌似更新很快，一些插件上面博文里的名字都不一样了。</p>
<h3 id="使用Gulp"><a href="#使用Gulp" class="headerlink" title="使用Gulp"></a>使用Gulp</h3><p>针对hexo代码的优化采用了过渡的方法，先讲public里的文件压缩后放在dst文件夹中，再将dst文件复制到public中。这里借鉴了<a href="http://www.5941740.cn/2016/02/19/gulp-minify-blog/" target="_blank" rel="external">博文</a>感谢但丁的分享。</p>
<p>如果你已经有了npm，按照下面的命令操作，应该就可以完成了。</p>
<pre><code>1. npm install --global gulp-cli    //按照全局gulp
2. npm install gulp --save-dev        //cd进入项目根目录，安装gulp
3. npm install gulp-shell gulp-clean gulp-minify-html gulp-minify-css gulp-uglify gulp-notify --save-dev              //安装插件
4. 编写gulpfile.js文件，见下图
5. 执行命令gulp，压缩代码到dst
6. 执行命令gulp mv，将压缩后的代码复制到public
</code></pre><p>这里解释下为什么不通过watch监听代码的变化，自动执行。但丁指出了这个问题——“需要说明的是,由于mv任务会将优化后的文件移回public目录,如果运行了watch任务,可能会造成循环任务.我没有开启后台监听任务,我是在外包shell脚本中运行gulp任务并提交代码。” 如果你有更好的方案，希望能告诉我(^_^)。</p>
<p>gulpfile.js的代码都在这里啦！</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// npm install gulp-shell gulp-clean gulp-minify-html gulp-minify-css gulp-uglify gulp-notify --save-dev   </span></div><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>),</div><div class="line">    minifyCss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</div><div class="line">    minifyHtml = <span class="built_in">require</span>(<span class="string">'gulp-minify-html'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</div><div class="line">    notify = <span class="built_in">require</span>(<span class="string">'gulp-notify'</span>),</div><div class="line">    shell = <span class="built_in">require</span>(<span class="string">'gulp-shell'</span>);</div><div class="line"></div><div class="line"><span class="comment">//清空dest文件夹</span></div><div class="line">gulp.task(<span class="string">"clean"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./dst/*"</span>)</div><div class="line">    .pipe(clean());</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩css文件，已压缩文件不用再压缩</span></div><div class="line">gulp.task(<span class="string">"css"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.css"</span>,<span class="string">"!public/**/*.min.css"</span>])</div><div class="line">    .pipe(minifyCss(&#123;compatibility: <span class="string">"ie8"</span>&#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">"./dst/"</span>));   </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩js文件</span></div><div class="line">gulp.task(<span class="string">"js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.js"</span>,<span class="string">"!public/**/*.min.js"</span>])</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">"./dst/"</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩html文件</span></div><div class="line">gulp.task(<span class="string">"html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"public/**/*.html"</span>)</div><div class="line">    .pipe(minifyHtml())</div><div class="line">    .pipe(gulp.dest(<span class="string">"./dst/"</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 设置默认任务，command line下输入gulp执行</span></div><div class="line"><span class="comment">// clean任务执行完成了才会去运行其他的任务，在gulp.start()里的任务执行的顺序是不确定的，所以将要在它们之前执行的任务写在数组里面</span></div><div class="line">gulp.task(<span class="string">"default"</span>,[<span class="string">'clean'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.start(<span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// det文件复制到public</span></div><div class="line">gulp.task(<span class="string">"mv"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./dst/*"</span>)</div><div class="line">    .pipe(shell([</div><div class="line">        <span class="string">"cp -r ./dst/* ./public/"</span></div><div class="line">    ]));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>希望你也顺利的使用Gulp啦。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Github Pages && Hexo 搭建个人博客]]></title>
      <url>http://yoursite.com/2016/07/13/build-blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纸上得来终觉浅，决知此事要躬行</p>
</blockquote>
<p>相关的教程网上着实不少，这里就不再赘述。附上自己借鉴过的博文，希望大家也能快速搭建自己的博客。😄</p>
<p>一般来说，我建议直接看相关产品的官方文档，个人写的东西虽然有时可以快速理解，但提供的信息有限，有很多炫酷的功能是需要自己挖掘地。</p>
<a id="more"></a>
<ol>
<li><p><a href="https://pages.github.com/" target="_blank" rel="external">https://pages.github.com/</a><br> 如何使用github pages  </p>
</li>
<li><p><a href="http://sunwhut.com/2015/10/30/buildBlog/" target="_blank" rel="external">http://sunwhut.com/2015/10/30/buildBlog/</a><br> 为什么选择Github Pages &amp;&amp; Hexo这里已经解释得很清楚，非技术人员一步步顺着走，也可以完成啦。  </p>
</li>
<li><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br> 我使用的主题是next。第三方插件和可配置项都很多，你可以个性化的定制你想要的。  </p>
</li>
<li><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a><br> Hexo的中文文档，常用的命令也就几条。  </p>
</li>
<li><p>Mac下我使用的Markdown编辑器是<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>, 个人觉得还是很小清新的。  </p>
</li>
<li><p>博文中插图，使用<a href="http://baike.baidu.com/view/620100.htm" target="_blank" rel="external">图床</a>即可，我使用的是七牛云存储。  </p>
</li>
<li><p>Markdown的语法很简单，可以参考<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">这里</a>，当然Mou自身也携带了md语法说明，help当中就有so easy.  </p>
</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
